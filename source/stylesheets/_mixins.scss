// Full width background image
@mixin jumbotron-bg($image-path, $vert-pos, $horiz-pos) {
  background: image-url('#{$image-path}') no-repeat $vert-pos $horiz-pos;
}

@mixin project($color, $image-path) {
  $base-color: $color;
  $base-color-dark: darken($base-color, 8%);
  $base-color-light: lighten($base-color, 10%);
  $base-color-saturate: saturate($base-color-light, 10%);
  $h1-color: $white;
  $text-color: lighten($base-color, 50%);
  $jumbotron-height: 500px;

	background: $base-color;

	.jumbotron {
		@include gradient-vertical($base-color, $base-color-saturate, 20%, 100%);
		position: relative;

		@media (min-width: $screen-md-min) {
			height: $jumbotron-height;
		}

		h1 {
			color: $h1-color;
			font-size: $font-size-h1;
		}

		p {
			font-size: $font-size-md;
			color: $text-color;
		}
	}

	.jumbotron-bg {
		@include jumbotron-bg('#{$image-path}', right, top);

		@media (min-width: $screen-md-min) {
			height: $jumbotron-height;
		}
	}

	.jumbotron-wrapper {
		padding-bottom: 1em;
		width: 100%;

		@media (min-width: $screen-md-min) {
			padding-bottom: 0;
			position: absolute;
			bottom: 1em;
		}
	}
	.jumbotron-cta {
		padding: 1em 0 1.4em;
		background: $base-color;

		.btn {
			@include button-variant($white, $base-color-saturate, transparent);
			@include button-size(.8em, 2.5em, $font-size-base, 1, 4px);
			font-style: italic;

			&:active,
			&:focus,
			&:hover {
				@include button-variant($white, $base-color, transparent);
			}

			@media (max-width: $screen-xs-max) {
				display: block;
				width: 100%;
			}
		}
	}

}













// Retina bg images
@mixin bg-image-retina($image-path, $type, $width, $height, $xpos, $ypos) {
  background-image: image-url($image-path + '.' + $type);
  background-size:  $width $height;
  background-position: $xpos $ypos;

  @media only screen and (-webkit-min-device-pixel-ratio: 2),
    only screen and (-moz-min-device-pixel-ratio: 2),
    only screen and (-o-min-device-pixel-ratio: 2/1),
    only screen and (min-device-pixel-ratio: 2),
    only screen and (min-resolution: 192dpi),
    only screen and (min-resolution: 2dppx){
    & {
      background-image: image-url($image-path + '@2x.' + $type);
      -webkit-background-size:        $width $height;
      -moz-background-size:           $width $height;
      -o-background-size:             $width $height;
      background-size:                $width $height;

      -webkit-background-position:    $xpos $ypos;
      -moz-background-position:       $xpos $ypos;
      -o-background-position:         $xpos $ypos;
      background-position:            $xpos $ypos;
    }
  }
}



// Consistent spacing for content sections
// Properties: margin or padding
// Sizes: lg, md, sm or xs
@mixin block-spacing($property, $size) {
  // x-large
  @if ($size == xl) {
    $md-spacing: $space-xl;
    $sm-spacing: $space-lg;
    $xs-spacing: $space-md;

    @if ($property == margin) {
      @include block-spacing-margin($md-spacing, $sm-spacing, $xs-spacing);
    }
    @if ($property == padding) {
      @include block-spacing-padding($md-spacing, $sm-spacing, $xs-spacing);
    }
  }
  // large
  @if ($size == lg) {
    $md-spacing: $space-lg;
    $sm-spacing: $space-md;
    $xs-spacing: $space-md;

    @if ($property == margin) {
      @include block-spacing-margin($md-spacing, $sm-spacing, $xs-spacing);
    }
    @if ($property == padding) {
      @include block-spacing-padding($md-spacing, $sm-spacing, $xs-spacing);
    }
  }
  // medium
  @if ($size == md) {
    $md-spacing: $space-md;
    $sm-spacing: $space-sm;
    $xs-spacing: $space-xs;

    @if ($property == margin) {
      @include block-spacing-margin($md-spacing, $sm-spacing, $xs-spacing);
    }
    @if ($property == padding) {
      @include block-spacing-padding($md-spacing, $sm-spacing, $xs-spacing);
    }
  }
  // small
  @if ($size == sm) {
    $md-spacing: $space-sm;
    $sm-spacing: $space-sm;
    $xs-spacing: $space-xs;

    @if ($property == margin) {
      @include block-spacing-margin($md-spacing, $sm-spacing, $xs-spacing);
    }
    @if ($property == padding) {
      @include block-spacing-padding($md-spacing, $sm-spacing, $xs-spacing);
    }
  }
  // x-small
  @if ($size == xs) {
    $md-spacing: $space-xs;
    $sm-spacing: $space-xs;
    $xs-spacing: $space-xs;

    @if ($property == margin) {
      @include block-spacing-margin($md-spacing, $sm-spacing, $xs-spacing);
    }
    @if ($property == padding) {
      @include block-spacing-padding($md-spacing, $sm-spacing, $xs-spacing);
    }
  }
}

@mixin block-spacing-margin($md-spacing, $sm-spacing, $xs-spacing) {
  margin-top:    $md-spacing;
  margin-bottom: $md-spacing;

  @media (max-width: $screen-sm-max) and (min-width: $screen-xs-min) {
    margin-top:    $sm-spacing;
    margin-bottom: $sm-spacing;
  }
  @media (max-width: $screen-xs-max){
    margin-top:    $xs-spacing;
    margin-bottom: $xs-spacing;
  }
}

@mixin block-spacing-padding($md-spacing, $sm-spacing, $xs-spacing) {
  padding-top:    $md-spacing;
  padding-bottom: $md-spacing;

  @media (max-width: $screen-sm-max) and (min-width: $screen-xs-min) {
    padding-top:    $sm-spacing;
    padding-bottom: $sm-spacing;
  }
  @media (max-width: $screen-xs-max){
    padding-top:    $xs-spacing;
    padding-bottom: $xs-spacing;
  }
}

// Border radius
@mixin border-radius($radius) {
  @include border-top-radius($radius);
  @include border-bottom-radius($radius);
}


// Create a grid of cards
// Specify how many cards at each breakpoint
@mixin card-grid($xs-per-row, $sm-per-row, $md-per-row, $lg-per-row) {

  $xs-col: 12/$xs-per-row;
  $sm-col: 12/$sm-per-row;
  $md-col: 12/$md-per-row;
  $lg-col: 12/$lg-per-row;

  @media (max-width: $screen-xs-max) {
    $nChild: $xs-per-row;

    .card {
      @include make-xs-column($xs-col);

      &:nth-child(#{$nChild}n+1) {
        clear: both;
      }
    }
  }

  @media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {
    $nChild: $sm-per-row;

    .card {
      @include make-sm-column($sm-col);
      //border-left: 1px solid $border-color;

      &:nth-child(#{$nChild}n+1) {
        clear: both;
        //border-left: 1px solid transparent;
      }
    }
  }

  @media (min-width: $screen-md-min) and (max-width: $screen-md-max) {
    $nChild: $md-per-row;

    .card {
      @include make-md-column($md-col);
      //border-left: 1px solid $border-color;

      &:nth-child(#{$nChild}n+1) {
        clear: both;
        //border-left: 1px solid transparent;
      }
    }
  }

  @media (min-width: $screen-lg) {
    $nChild: $lg-per-row;

    .card {
      @include make-lg-column($lg-col);
      //border-left: 1px solid $border-color;

      &:nth-child(#{$nChild}n+1) {
        clear: both;
        //border-left: 1px solid transparent;
      }
    }
  }
}
